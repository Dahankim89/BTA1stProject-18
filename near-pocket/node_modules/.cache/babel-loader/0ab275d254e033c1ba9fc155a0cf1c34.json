{"ast":null,"code":"var _jsxFileName = \"/Users/dahan/Desktop/blockchain/BTA1stProject-18/near-pocket/src/views/Popup/ImportAccount.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport Box from '@mui/material/Box';\nimport { Button, TextField, Typography } from '@mui/material';\nimport EntryHeader from '../../components/EntryHeader';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport useAlert from '../../hooks/useAlert';\nimport { encryptMessage, getAccountIds, getStorageSyncValue, setStorageSyncValue } from \"../../utils/utilsUpdated\";\nimport { parseSeedPhrase } from \"near-seed-phrase\";\nimport { KeyPair } from \"near-api-js\";\nimport { SWITCH_ACCOUNT } from \"../../redux/actionTypes\";\nimport { CONFIG } from \"../../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImportAccount = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [phrase, setPhrase] = useState(\"\");\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    setAlert\n  } = useAlert();\n  const handleTypeConfirmMnemonics = e => {\n    setPhrase(e.target.value);\n  };\n  const importAccount = async () => {\n    let secretKey;\n    let seedPhrase;\n    try {\n      if (phrase.startsWith(\"ed25519:\")) {\n        //프라이빗키로 입력받은 경우\n        secretKey = phrase;\n      } else {\n        //시드 구문으로 입력받은 경우\n        const split = phrase.split(\" \");\n        if (split.length === 1) {\n          setAlert('error', \"유효하지 않은 시드 구문입니다.\");\n          throw new Error(\"유효하지 않은 시드 구문입니다.\");\n        }\n        if (!phrase) return;\n        const {\n          secretKey,\n          seedPhrase\n        } = parseSeedPhrase(phrase);\n      }\n      const keyPair = KeyPair.fromString(secretKey);\n      const publicKey = keyPair.publicKey.toString(); //키페어에 퍼블릭키를 가져온다.\n      console.log(publicKey);\n      const accountIdsByPublickKey = await getAccountIds(publicKey); //퍼블릭키로 Account ID를 가져온다.\n      console.log(\"accountID: \" + accountIdsByPublickKey);\n      if (!phrase || accountIdsByPublickKey.length === 0) {\n        setAlert('error', \"유효하지 않은 시드 구문입니다.\");\n        throw new Error(\"유효하지 않은 시드 구문입니다.\");\n      }\n      setLoading(true);\n      let isExist = false;\n      let userInfo = await getStorageSyncValue(\"userInfo\");\n      console.log(userInfo);\n      for (let info in userInfo) {\n        if (userInfo[info].accountID === accountIdsByPublickKey) {\n          isExist = true;\n        }\n      }\n      if (isExist) {\n        setAlert('error', \"해당 계정은 이미 존재합니다.\");\n        //alert(\"해당 계정은 이미 존재합니다.\");\n        setLoading(false);\n        return;\n      }\n      let hashedPassword = await getStorageSyncValue(\"hashedPassword\");\n      const cipherPrivateKey = encryptMessage(secretKey, hashedPassword);\n      const cipherPhrase = encryptMessage(seedPhrase, hashedPassword);\n      let keys = userInfo ? Object.keys(userInfo) : null;\n      let walletName = `wallet${keys.length + 1}`;\n      userInfo = {\n        ...userInfo,\n        [walletName]: {\n          name: walletName,\n          accountID: accountIdsByPublickKey,\n          accounts: {\n            [publicKey]: {\n              data: cipherPhrase,\n              address: publicKey,\n              secretKey: cipherPrivateKey\n            }\n          }\n        }\n      };\n      dispatch({\n        type: SWITCH_ACCOUNT,\n        payload: {\n          activeWallet: keys ? `wallet${keys.length + 1}` : \"wallet1\",\n          activeAccountID: accountIdsByPublickKey\n        }\n      });\n      await setStorageSyncValue(\"userInfo\", userInfo);\n      setLoading(false);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.log(\"error : \", error.message);\n      setLoading(false);\n      setAlert('error', error.message);\n      //alert(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(EntryHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      children: \"\\uC2DC\\uB4DC \\uAD6C\\uBB38 / \\uC2DC\\uD06C\\uB9BF\\uD0A4\\uB85C \\uACC4\\uC815 \\uAC00\\uC838\\uC624\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 5,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"\\uC2DC\\uB4DC \\uAD6C\\uBB38 / \\uC2DC\\uD06C\\uB9BF\\uD0A4 \\uC785\\uB825\",\n        fullWidth: true,\n        variant: \"outlined\",\n        onChange: handleTypeConfirmMnemonics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 5,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: importAccount,\n        fullWidth: true,\n        variant: \"contained\",\n        disabled: !phrase,\n        children: \"\\uAC00\\uC838\\uC624\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(ImportAccount, \"wRygEz83piUadsT8HfRpYUotk1c=\", false, function () {\n  return [useDispatch, useNavigate, useAlert];\n});\n_c = ImportAccount;\nexport default ImportAccount;\nvar _c;\n$RefreshReg$(_c, \"ImportAccount\");","map":{"version":3,"names":["React","useState","useNavigate","useDispatch","Box","Button","TextField","Typography","EntryHeader","LoadingSpinner","useAlert","encryptMessage","getAccountIds","getStorageSyncValue","setStorageSyncValue","parseSeedPhrase","KeyPair","SWITCH_ACCOUNT","CONFIG","ImportAccount","loading","setLoading","phrase","setPhrase","dispatch","navigate","setAlert","handleTypeConfirmMnemonics","e","target","value","importAccount","secretKey","seedPhrase","startsWith","split","length","Error","keyPair","fromString","publicKey","toString","console","log","accountIdsByPublickKey","isExist","userInfo","info","accountID","hashedPassword","cipherPrivateKey","cipherPhrase","keys","Object","walletName","name","accounts","data","address","type","payload","activeWallet","activeAccountID","error","message"],"sources":["/Users/dahan/Desktop/blockchain/BTA1stProject-18/near-pocket/src/views/Popup/ImportAccount.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nimport Box from '@mui/material/Box';\nimport { Button, TextField, Typography } from '@mui/material';\nimport EntryHeader from '../../components/EntryHeader';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport useAlert from '../../hooks/useAlert';\n\nimport {\n  encryptMessage,\n  getAccountIds,\n  getStorageSyncValue,\n  setStorageSyncValue,\n} from \"../../utils/utilsUpdated\";\nimport { parseSeedPhrase } from \"near-seed-phrase\";\nimport { KeyPair } from \"near-api-js\";\nimport { SWITCH_ACCOUNT } from \"../../redux/actionTypes\";\nimport { CONFIG } from \"../../constants\";\n\nconst ImportAccount = () => {\n  const [loading, setLoading] = useState(false);\n  const [phrase, setPhrase] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n  const { setAlert } = useAlert();\n\n  const handleTypeConfirmMnemonics = (e) => {\n    setPhrase(e.target.value);\n  };\n\n  \n\n  const importAccount = async () => {\n    let secretKey;\n  let seedPhrase;\n    try {\n      \n      if (phrase.startsWith(\"ed25519:\")) {\n        //프라이빗키로 입력받은 경우\n        secretKey = phrase;\n      } else {\n        //시드 구문으로 입력받은 경우\n        const split = phrase.split(\" \");\n        if (split.length === 1) {\n          setAlert('error', \"유효하지 않은 시드 구문입니다.\");\n          throw new Error(\"유효하지 않은 시드 구문입니다.\");\n        }\n        if (!phrase) return;\n\n        const { secretKey, seedPhrase } = parseSeedPhrase(phrase);\n      }\n     \n      const keyPair = KeyPair.fromString(secretKey);\n      const publicKey = keyPair.publicKey.toString(); //키페어에 퍼블릭키를 가져온다.\n      console.log(publicKey);\n\n      const accountIdsByPublickKey = await getAccountIds(publicKey); //퍼블릭키로 Account ID를 가져온다.\n      console.log(\"accountID: \" + accountIdsByPublickKey);\n\n      if (!phrase || accountIdsByPublickKey.length === 0) {\n        setAlert('error', \"유효하지 않은 시드 구문입니다.\");\n        throw new Error(\"유효하지 않은 시드 구문입니다.\");\n      }\n      setLoading(true);\n\n      let isExist = false;\n      let userInfo = await getStorageSyncValue(\"userInfo\");\n      console.log(userInfo);\n      for (let info in userInfo) {\n        if (userInfo[info].accountID === accountIdsByPublickKey) {\n          isExist = true;\n        }\n      }\n\n      if (isExist) {\n        setAlert('error', \"해당 계정은 이미 존재합니다.\");\n        //alert(\"해당 계정은 이미 존재합니다.\");\n        setLoading(false);\n        return;\n      }\n      let hashedPassword = await getStorageSyncValue(\"hashedPassword\");\n      const cipherPrivateKey = encryptMessage(secretKey, hashedPassword);\n      const cipherPhrase = encryptMessage(seedPhrase, hashedPassword);\n      let keys = userInfo ? Object.keys(userInfo) : null;\n      let walletName = `wallet${keys.length + 1}`;\n      userInfo = {\n        ...userInfo,\n        [walletName]: {\n          name: walletName,\n          accountID: accountIdsByPublickKey,\n          accounts: {\n            [publicKey]: {\n              data: cipherPhrase,\n              address: publicKey,\n              secretKey: cipherPrivateKey,\n            },\n          },\n        },\n      };\n\n      dispatch({\n        type: SWITCH_ACCOUNT,\n        payload: {\n          activeWallet: keys ? `wallet${keys.length + 1}` : \"wallet1\",\n          activeAccountID: accountIdsByPublickKey,\n        },\n      });\n\n      await setStorageSyncValue(\"userInfo\", userInfo);\n      setLoading(false);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.log(\"error : \", error.message);\n      setLoading(false);\n      setAlert('error', error.message);\n      //alert(error.message);\n    }\n  };\n\n  return (\n    <Box>\n      <EntryHeader />\n      <Typography variant='h6' align='center'>\n        시드 구문 / 시크릿키로 계정 가져오기\n      </Typography>\n      \n      <Box mt={5}>\n        <TextField label='시드 구문 / 시크릿키 입력' fullWidth variant='outlined' onChange={handleTypeConfirmMnemonics} />\n      </Box>\n      \n      <Box mt={5}>\n        <Button onClick={importAccount} fullWidth variant='contained' disabled={!phrase}>\n          가져오기\n        </Button>\n      </Box>\n      {loading && <LoadingSpinner />}\n    </Box>\n\n  );\n};\n\nexport default ImportAccount;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}