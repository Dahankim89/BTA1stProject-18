{"ast":null,"code":"var _jsxFileName = \"/Users/dahan/Desktop/blockchain/BTA1stProject-18/near-pocket/src/views/Popup/ImportAccount.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { encryptMessage, getAccountIds, getStorageSyncValue, setStorageSyncValue } from \"../../utils/utilsUpdated\";\nimport { parseSeedPhrase } from \"near-seed-phrase\";\nimport { KeyPair, connect, WalletConnection } from \"near-api-js\";\nimport { SWITCH_ACCOUNT } from \"../../redux/actionTypes\";\nimport { CONFIG } from \"../../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImportAccount = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [phrase, setPhrase] = useState(\"\");\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const importAccount = async () => {\n    try {\n      if (phrase.startsWith(\"ed25519:\")) {\n        //프라이빗키로 입력받은 경우\n        secretKey = phrase;\n      } else {\n        //시드 구문으로 입력받은 경우\n        const split = phrase.split(\" \");\n        if (split.length === 1) {\n          throw new Error(\"유효하지 않은 시드 구문입니다.\");\n        }\n        if (!phrase) return;\n      }\n      const {\n        secretKey,\n        seedPhrase\n      } = parseSeedPhrase(phrase);\n      const keyPair = KeyPair.fromString(secretKey);\n      const publicKey = keyPair.publicKey.toString(); //키페어에 퍼블릭키를 가져온다.\n      console.log(publicKey);\n      const accountIdsByPublickKey = await getAccountIds(publicKey); //퍼블릭키로 Account ID를 가져온다.\n      console.log(\"ID -- \" + accountIdsByPublickKey);\n      if (!phrase || accountIdsByPublickKey.length === 0) {\n        throw new Error(\"유효하지 않은 시드 구문입니다.\");\n      }\n      setLoading(true);\n      let isExist = false;\n      let userInfo = await getStorageSyncValue(\"userInfo\");\n      console.log(userInfo);\n      for (let info in userInfo) {\n        if (userInfo[info].accountID === accountIdsByPublickKey) {\n          isExist = true;\n        }\n      }\n      if (isExist) {\n        alert(\"해당 계정은 이미 존재합니다.\");\n        setLoading(false);\n        return;\n      }\n      let hashedPassword = await getStorageSyncValue(\"hashedPassword\");\n      const cipherPrivateKey = encryptMessage(secretKey, hashedPassword);\n      const cipherPhrase = encryptMessage(seedPhrase, hashedPassword);\n      let keys = userInfo ? Object.keys(userInfo) : null;\n      let walletName = `wallet${keys.length + 1}`;\n      userInfo = {\n        ...userInfo,\n        [walletName]: {\n          name: walletName,\n          accountID: accountIdsByPublickKey,\n          accounts: {\n            [publicKey]: {\n              data: cipherPhrase,\n              address: publicKey,\n              secretKey: cipherPrivateKey\n            }\n          }\n        }\n      };\n      dispatch({\n        type: SWITCH_ACCOUNT,\n        payload: {\n          activeWallet: keys ? `wallet${keys.length + 1}` : \"wallet1\",\n          activeAccountID: accountIdsByPublickKey\n        }\n      });\n      await setStorageSyncValue(\"userInfo\", userInfo);\n      setLoading(false);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.log(\"error : \", error.message);\n      setLoading(false);\n      alert(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uC2DC\\uB4DC \\uAD6C\\uBB38 / \\uC2DC\\uD06C\\uB9BF \\uD0A4\\uB85C \\uACC4\\uC815 \\uAC00\\uC838\\uC624\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: phrase,\n      onChange: e => setPhrase(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: importAccount,\n      children: \"\\uAC00\\uC838\\uC624\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginTop: 10\n      },\n      onClick: () => navigate(\"/dashboard\"),\n      children: [\" \", \"<\", \" \\uB4A4\\uB85C\\uAC00\\uAE30\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(ImportAccount, \"aEMqR7YdE0TXRQMqfsutzQH0cDA=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n_c = ImportAccount;\nexport default ImportAccount;\nvar _c;\n$RefreshReg$(_c, \"ImportAccount\");","map":{"version":3,"names":["React","useState","useNavigate","useDispatch","encryptMessage","getAccountIds","getStorageSyncValue","setStorageSyncValue","parseSeedPhrase","KeyPair","connect","WalletConnection","SWITCH_ACCOUNT","CONFIG","ImportAccount","loading","setLoading","phrase","setPhrase","dispatch","navigate","importAccount","startsWith","secretKey","split","length","Error","seedPhrase","keyPair","fromString","publicKey","toString","console","log","accountIdsByPublickKey","isExist","userInfo","info","accountID","alert","hashedPassword","cipherPrivateKey","cipherPhrase","keys","Object","walletName","name","accounts","data","address","type","payload","activeWallet","activeAccountID","error","message","e","target","value","marginTop"],"sources":["/Users/dahan/Desktop/blockchain/BTA1stProject-18/near-pocket/src/views/Popup/ImportAccount.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  encryptMessage,\n  getAccountIds,\n  getStorageSyncValue,\n  setStorageSyncValue,\n} from \"../../utils/utilsUpdated\";\nimport { parseSeedPhrase } from \"near-seed-phrase\";\nimport { KeyPair, connect, WalletConnection } from \"near-api-js\";\nimport { SWITCH_ACCOUNT } from \"../../redux/actionTypes\";\nimport { CONFIG } from \"../../constants\";\n\nconst ImportAccount = () => {\n  const [loading, setLoading] = useState(false);\n  const [phrase, setPhrase] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  const importAccount = async () => {\n    try {\n      \n      if (phrase.startsWith(\"ed25519:\")) {\n        //프라이빗키로 입력받은 경우\n        secretKey = phrase;\n      } else {\n        //시드 구문으로 입력받은 경우\n        const split = phrase.split(\" \");\n        if (split.length === 1) {\n          throw new Error(\"유효하지 않은 시드 구문입니다.\");\n        }\n        if (!phrase) return;\n      }\n\n      const { secretKey, seedPhrase } = parseSeedPhrase(phrase);\n\n      const keyPair = KeyPair.fromString(secretKey);\n      const publicKey = keyPair.publicKey.toString(); //키페어에 퍼블릭키를 가져온다.\n      console.log(publicKey);\n\n      const accountIdsByPublickKey = await getAccountIds(publicKey); //퍼블릭키로 Account ID를 가져온다.\n      console.log(\"ID -- \" + accountIdsByPublickKey);\n\n      if (!phrase || accountIdsByPublickKey.length === 0) {\n        throw new Error(\"유효하지 않은 시드 구문입니다.\");\n      }\n      setLoading(true);\n\n      let isExist = false;\n      let userInfo = await getStorageSyncValue(\"userInfo\");\n      console.log(userInfo);\n      for (let info in userInfo) {\n        if (userInfo[info].accountID === accountIdsByPublickKey) {\n          isExist = true;\n        }\n      }\n\n      if (isExist) {\n        alert(\"해당 계정은 이미 존재합니다.\");\n        setLoading(false);\n        return;\n      }\n      let hashedPassword = await getStorageSyncValue(\"hashedPassword\");\n      const cipherPrivateKey = encryptMessage(secretKey, hashedPassword);\n      const cipherPhrase = encryptMessage(seedPhrase, hashedPassword);\n      let keys = userInfo ? Object.keys(userInfo) : null;\n      let walletName = `wallet${keys.length + 1}`;\n      userInfo = {\n        ...userInfo,\n        [walletName]: {\n          name: walletName,\n          accountID: accountIdsByPublickKey,\n          accounts: {\n            [publicKey]: {\n              data: cipherPhrase,\n              address: publicKey,\n              secretKey: cipherPrivateKey,\n            },\n          },\n        },\n      };\n\n      dispatch({\n        type: SWITCH_ACCOUNT,\n        payload: {\n          activeWallet: keys ? `wallet${keys.length + 1}` : \"wallet1\",\n          activeAccountID: accountIdsByPublickKey,\n        },\n      });\n\n      await setStorageSyncValue(\"userInfo\", userInfo);\n      setLoading(false);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.log(\"error : \", error.message);\n      setLoading(false);\n      alert(error.message);\n    }\n  };\n\n  return (\n    <div>\n      <h3>시드 구문 / 시크릿 키로 계정 가져오기</h3>\n      <input value={phrase} onChange={e => setPhrase(e.target.value)} />\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <button onClick={importAccount}>가져오기</button>\n      )}\n      <button style={{ marginTop: 10 }} onClick={() => navigate(\"/dashboard\")}>\n        {\" \"}\n        {\"<\"} 뒤로가기\n      </button>\n    </div>\n  );\n};\n\nexport default ImportAccount;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}