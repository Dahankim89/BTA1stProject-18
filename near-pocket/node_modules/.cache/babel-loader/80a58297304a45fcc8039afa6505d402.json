{"ast":null,"code":"import crypto from \"crypto-js\";\nimport axios from \"axios\";\nimport { generateSeedPhrase } from \"near-seed-phrase\";\nimport { KeyPair } from \"near-api-js\";\nimport { BASE_URL, OPEN_IN_WEB, STORAGE } from \"../constants\";\nexport const getStorageSyncValue = async keyName => {\n  try {\n    if (OPEN_IN_WEB) {\n      return new Promise((resolve, reject) => {\n        const item = localStorage.getItem(keyName);\n        resolve(JSON.parse(item));\n      });\n    }\n    return new Promise((resolve, reject) => {\n      STORAGE === null || STORAGE === void 0 ? void 0 : STORAGE.get([keyName], function (extractedValue) {\n        if (extractedValue[keyName]) {\n          resolve(JSON.parse(extractedValue[keyName]));\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nexport const setStorageSyncValue = async (keyName, value) => {\n  try {\n    if (OPEN_IN_WEB) {\n      return new Promise((resolve, reject) => {\n        localStorage.setItem(keyName, JSON.stringify(value));\n        resolve();\n      });\n    }\n    return new Promise((resolve, reject) => {\n      STORAGE === null || STORAGE === void 0 ? void 0 : STORAGE.set({\n        [keyName]: JSON.stringify(value)\n      }, function () {\n        resolve();\n      });\n    });\n  } catch (error) {\n    console.log(\"error setting the sync storage \", error);\n  }\n};\nexport const encryptMessage = (message, secret) => {\n  const ciphertext = crypto.AES.encrypt(JSON.stringify(message), secret).toString();\n  return ciphertext;\n};\nexport const decryptMessage = (cipherText, secret) => {\n  let bytes = crypto.AES.decrypt(cipherText, secret);\n  let decryptedText = JSON.parse(bytes.toString(crypto.enc.Utf8));\n  return decryptedText;\n};\nexport const initialTasks = async activeWallet => {\n  let userInfo = await getStorageSyncValue(\"userInfo\");\n  let accountsList = userInfo[activeWallet][\"accounts\"];\n  let accountID = userInfo[activeWallet].accountID;\n  let firstUser = accountsList[Object.keys(accountsList)[0]];\n  let {\n    data,\n    secretKey,\n    address\n  } = firstUser;\n  let hashedPassword = await getStorageSyncValue(\"hashedPassword\");\n  const mnemonic = await decryptMessage(data, hashedPassword);\n  const privateKey = await decryptMessage(secretKey, hashedPassword);\n  return {\n    firstUser,\n    secret: privateKey,\n    mnemonic,\n    address,\n    accountID,\n    allAccounts: Object.keys(userInfo)\n  };\n};\nexport const showAllHoldings = async (accountID, near) => {\n  const {\n    data\n  } = await axios.get(`${BASE_URL}/account/${accountID}/likelyTokens`);\n  const account = await near.account(accountID);\n  let tokensInfo = [];\n  await Promise.all(data.map(async token => {\n    let tokenInfo = await account.viewFunction(token, \"ft_metadata\", {\n      account_id: accountID\n    });\n    let balance = await account.viewFunction(token, \"ft_balance_of\", {\n      account_id: accountID\n    });\n    tokensInfo.push({\n      name: tokenInfo.name,\n      symbol: tokenInfo.symbol,\n      balance: balance / 10 ** tokenInfo.decimals,\n      contractName: token,\n      decimals: tokenInfo.decimals\n    });\n  }));\n  return tokensInfo;\n};\nexport const setDataWithExpiry = (key, data, expiry) => {\n  const now = new Date();\n  const item = {\n    data,\n    expiry: now.getTime() + expiry\n  };\n  localStorage.setItem(key, JSON.stringify(item));\n};\nexport const generateSeed = entropy => {\n  const {\n    seedPhrase,\n    publicKey,\n    secretKey\n  } = generateSeedPhrase();\n  const recoveryKeyPair = KeyPair.fromString(secretKey);\n  return {\n    phrase: seedPhrase,\n    address: recoveryKeyPair.getPublicKey().toString(),\n    secret: recoveryKeyPair.secretKey\n  };\n};\nexport const checkAccountStatus = async accountInfo => {\n  try {\n    await accountInfo.state();\n    return true;\n  } catch (error) {\n    console.log(\"er=====\", error);\n    return false;\n  }\n};\nexport const fetchBalance = async account => {\n  const balance = await account.getAccountBalance();\n  console.log(\"AHahh\", balance);\n  return balance.available / 10 ** 24;\n};\nexport let controller;\nexport async function getAccountIds(publicKey) {\n  controller = new AbortController();\n  console.log(`${BASE_URL}/accountID?${publicKey}`);\n  const {\n    data\n  } = await axios.get(`${BASE_URL}/accountID?publicKey=${publicKey}`);\n  console.log(data);\n  return data.account_id;\n\n  /* return await fetch(`${BASE_URL}/accountID?publicKey=${publicKey}`, {\n    signal: controller.signal,\n  }).then(res => res.json()); */\n}","map":{"version":3,"names":["crypto","axios","generateSeedPhrase","KeyPair","BASE_URL","OPEN_IN_WEB","STORAGE","getStorageSyncValue","keyName","Promise","resolve","reject","item","localStorage","getItem","JSON","parse","get","extractedValue","error","Error","setStorageSyncValue","value","setItem","stringify","set","console","log","encryptMessage","message","secret","ciphertext","AES","encrypt","toString","decryptMessage","cipherText","bytes","decrypt","decryptedText","enc","Utf8","initialTasks","activeWallet","userInfo","accountsList","accountID","firstUser","Object","keys","data","secretKey","address","hashedPassword","mnemonic","privateKey","allAccounts","showAllHoldings","near","account","tokensInfo","all","map","token","tokenInfo","viewFunction","account_id","balance","push","name","symbol","decimals","contractName","setDataWithExpiry","key","expiry","now","Date","getTime","generateSeed","entropy","seedPhrase","publicKey","recoveryKeyPair","fromString","phrase","getPublicKey","checkAccountStatus","accountInfo","state","fetchBalance","getAccountBalance","available","controller","getAccountIds","AbortController"],"sources":["/Users/dahan/Desktop/blockchain/BTA1stProject-18/near-pocket/src/utils/utilsUpdated.js"],"sourcesContent":["import crypto from \"crypto-js\";\nimport axios from \"axios\";\nimport { generateSeedPhrase } from \"near-seed-phrase\";\nimport { KeyPair } from \"near-api-js\";\n\nimport { BASE_URL, OPEN_IN_WEB, STORAGE } from \"../constants\";\n\nexport const getStorageSyncValue = async keyName => {\n  try {\n    if (OPEN_IN_WEB) {\n      return new Promise((resolve, reject) => {\n        const item = localStorage.getItem(keyName);\n        resolve(JSON.parse(item));\n      });\n    }\n    return new Promise((resolve, reject) => {\n      STORAGE?.get([keyName], function (extractedValue) {\n        if (extractedValue[keyName]) {\n          resolve(JSON.parse(extractedValue[keyName]));\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const setStorageSyncValue = async (keyName, value) => {\n  try {\n    if (OPEN_IN_WEB) {\n      return new Promise((resolve, reject) => {\n        localStorage.setItem(keyName, JSON.stringify(value));\n        resolve();\n      });\n    }\n    return new Promise((resolve, reject) => {\n      STORAGE?.set({ [keyName]: JSON.stringify(value) }, function () {\n        resolve();\n      });\n    });\n  } catch (error) {\n    console.log(\"error setting the sync storage \", error);\n  }\n};\n\nexport const encryptMessage = (message, secret) => {\n  const ciphertext = crypto.AES.encrypt(\n    JSON.stringify(message),\n    secret\n  ).toString();\n\n  return ciphertext;\n};\n\nexport const decryptMessage = (cipherText, secret) => {\n  let bytes = crypto.AES.decrypt(cipherText, secret);\n  let decryptedText = JSON.parse(bytes.toString(crypto.enc.Utf8));\n\n  return decryptedText;\n};\n\nexport const initialTasks = async activeWallet => {\n  let userInfo = await getStorageSyncValue(\"userInfo\");\n  let accountsList = userInfo[activeWallet][\"accounts\"];\n  let accountID = userInfo[activeWallet].accountID;\n  let firstUser = accountsList[Object.keys(accountsList)[0]];\n\n  let { data, secretKey, address } = firstUser;\n  let hashedPassword = await getStorageSyncValue(\"hashedPassword\");\n  const mnemonic = await decryptMessage(data, hashedPassword);\n  const privateKey = await decryptMessage(secretKey, hashedPassword);\n\n  return {\n    firstUser,\n    secret: privateKey,\n    mnemonic,\n    address,\n    accountID,\n    allAccounts: Object.keys(userInfo),\n  };\n};\n\nexport const showAllHoldings = async (accountID, near) => {\n  const { data } = await axios.get(\n    `${BASE_URL}/account/${accountID}/likelyTokens`\n  );\n\n  const account = await near.account(accountID);\n  let tokensInfo = [];\n  await Promise.all(\n    data.map(async token => {\n      let tokenInfo = await account.viewFunction(token, \"ft_metadata\", {\n        account_id: accountID,\n      });\n\n      let balance = await account.viewFunction(token, \"ft_balance_of\", {\n        account_id: accountID,\n      });\n\n      tokensInfo.push({\n        name: tokenInfo.name,\n        symbol: tokenInfo.symbol,\n        balance: balance / 10 ** tokenInfo.decimals,\n        contractName: token,\n        decimals: tokenInfo.decimals,\n      });\n    })\n  );\n\n  return tokensInfo;\n};\n\nexport const setDataWithExpiry = (key, data, expiry) => {\n  const now = new Date();\n\n  const item = {\n    data,\n    expiry: now.getTime() + expiry,\n  };\n  localStorage.setItem(key, JSON.stringify(item));\n};\n\nexport const generateSeed = entropy => {\n  const { seedPhrase, publicKey, secretKey } = generateSeedPhrase();\n  const recoveryKeyPair = KeyPair.fromString(secretKey);\n  return {\n    phrase: seedPhrase,\n    address: recoveryKeyPair.getPublicKey().toString(),\n    secret: recoveryKeyPair.secretKey,\n  };\n};\n\nexport const checkAccountStatus = async accountInfo => {\n  try {\n    await accountInfo.state();\n    return true;\n  } catch (error) {\n    console.log(\"er=====\", error);\n    return false;\n  }\n};\n\nexport const fetchBalance = async account => {\n  const balance = await account.getAccountBalance();\n  console.log(\"AHahh\", balance);\n  return balance.available / 10 ** 24;\n};\n\nexport let controller;\n\nexport async function getAccountIds(publicKey) {\n  controller = new AbortController();\n  console.log(`${BASE_URL}/accountID?${publicKey}`);\n\n  const { data } = await axios.get(\n    `${BASE_URL}/accountID?publicKey=${publicKey}`\n  );\n  console.log(data);\n  return data.account_id;\n\n  /* return await fetch(`${BASE_URL}/accountID?publicKey=${publicKey}`, {\n    signal: controller.signal,\n  }).then(res => res.json()); */\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}