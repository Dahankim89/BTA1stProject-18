{"ast":null,"code":"var _jsxFileName = \"/Users/dahan/Desktop/blockchain/BTA1stProject-18/near-pocket/src/views/Popup/Recover.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Box from '@mui/material/Box';\nimport { Button, TextField, Typography } from '@mui/material';\nimport EntryHeader from '../../components/EntryHeader';\nimport { encryptMessage, getAccountIds, getStorageSyncValue, setStorageSyncValue } from \"../../utils/utilsUpdated\";\nimport { parseSeedPhrase } from \"near-seed-phrase\";\nimport { KeyPair } from \"near-api-js\";\nimport { useDispatch } from \"react-redux\";\nimport { CREATE_WALLET, IMPORT_WALLET, SET_CURRENT_WALLET_NAME, SWITCH_ACCOUNT } from \"../../redux/actionTypes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImportAccount = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [phrase, setPhrase] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const handleTypeConfirmMnemonics = e => {\n    //setMnemonicError(false);\n    setPhrase(e.target.value);\n  };\n  const handleTypeConfirmPassword = e => {\n    //setMnemonicError(false);\n    setPassword(e.target.value);\n  };\n  const recoverAccount = async () => {\n    try {\n      const split = phrase.split(\" \");\n      if (split.length === 1) {\n        throw new Error(\"유효하지 않은 시드 문구입니다.\");\n      }\n      if (!phrase) return;\n      if (!password) {\n        alert(\"패스워드를 입력해주세요.\");\n        return;\n      }\n      setLoading(true);\n      const {\n        secretKey,\n        seedPhrase\n      } = parseSeedPhrase(phrase);\n      const keyPair = KeyPair.fromString(secretKey);\n      const publicKey = keyPair.publicKey.toString();\n      const accountIdsByPublickKey = await getAccountIds(publicKey);\n      console.log(accountIdsByPublickKey);\n      const cipherPrivateKey = encryptMessage(secretKey, password);\n      const cipherPhrase = encryptMessage(seedPhrase, password);\n      let userInfo = {\n        wallet1: {\n          name: \"wallet1\",\n          accountID: accountIdsByPublickKey,\n          //accountIdsByPublickKey.length > 0 && accountIdsByPublickKey[0],\n          accounts: {\n            [publicKey]: {\n              data: cipherPhrase,\n              address: publicKey,\n              secretKey: cipherPrivateKey\n            }\n          }\n        }\n      };\n      dispatch({\n        type: SWITCH_ACCOUNT,\n        payload: {\n          activeWallet: \"wallet1\",\n          activeAccountID: accountIdsByPublickKey\n        }\n      });\n      dispatch({\n        type: IMPORT_WALLET,\n        payload: {\n          walletImported: true\n        }\n      });\n      dispatch({\n        type: CREATE_WALLET,\n        payload: {\n          isLoggedIn: true\n        }\n      });\n      dispatch({\n        type: SET_CURRENT_WALLET_NAME,\n        payload: \"wallet1\"\n      });\n      await setStorageSyncValue(\"userInfo\", userInfo);\n      await setStorageSyncValue(\"hashedPassword\", password);\n      await setStorageSyncValue(\"accounts\", 0);\n      localStorage.setItem(\"wallet\", true);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.log(\"err===\", error.message);\n      setLoading(false);\n      alert(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(EntryHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"left\",\n      children: \"\\uC2DC\\uB4DC \\uAD6C\\uBB38\\uC73C\\uB85C \\uACC4\\uC815 \\uBCF5\\uAD6C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle2\",\n      sx: {\n        color: '#636363'\n      },\n      align: \"left\",\n      mt: 2,\n      children: \"\\uC2DC\\uB4DC \\uAD6C\\uBB38\\uACFC \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 5,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"\\uC2DC\\uB4DC \\uAD6C\\uBB38 \\uC785\\uB825\",\n        fullWidth: true,\n        variant: \"outlined\",\n        onChange: handleTypeConfirmMnemonics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 5,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uC785\\uB825\",\n        fullWidth: true,\n        variant: \"outlined\",\n        onChange: handleTypeConfirmPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 5,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: recoverAccount,\n        fullWidth: true,\n        variant: \"contained\",\n        disabled: !password || !phrase,\n        children: \"\\uBCF5\\uAD6C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => navigate(\"/dashboard\"),\n        fullWidth: true,\n        variant: \"contained\",\n        children: \"\\uB4A4\\uB85C\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(ImportAccount, \"rz6sf4eqSlHRNlJjVt9yEfSRUys=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n_c = ImportAccount;\nexport default ImportAccount;\nvar _c;\n$RefreshReg$(_c, \"ImportAccount\");","map":{"version":3,"names":["React","useState","useNavigate","Box","Button","TextField","Typography","EntryHeader","encryptMessage","getAccountIds","getStorageSyncValue","setStorageSyncValue","parseSeedPhrase","KeyPair","useDispatch","CREATE_WALLET","IMPORT_WALLET","SET_CURRENT_WALLET_NAME","SWITCH_ACCOUNT","ImportAccount","loading","setLoading","phrase","setPhrase","password","setPassword","dispatch","navigate","handleTypeConfirmMnemonics","e","target","value","handleTypeConfirmPassword","recoverAccount","split","length","Error","alert","secretKey","seedPhrase","keyPair","fromString","publicKey","toString","accountIdsByPublickKey","console","log","cipherPrivateKey","cipherPhrase","userInfo","wallet1","name","accountID","accounts","data","address","type","payload","activeWallet","activeAccountID","walletImported","isLoggedIn","localStorage","setItem","error","message","color"],"sources":["/Users/dahan/Desktop/blockchain/BTA1stProject-18/near-pocket/src/views/Popup/Recover.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Box from '@mui/material/Box';\nimport { Button, TextField, Typography } from '@mui/material';\nimport EntryHeader from '../../components/EntryHeader';\n\nimport {\n  encryptMessage,\n  getAccountIds,\n  getStorageSyncValue,\n  setStorageSyncValue,\n} from \"../../utils/utilsUpdated\";\nimport { parseSeedPhrase } from \"near-seed-phrase\";\nimport { KeyPair } from \"near-api-js\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  CREATE_WALLET,\n  IMPORT_WALLET,\n  SET_CURRENT_WALLET_NAME,\n  SWITCH_ACCOUNT,\n} from \"../../redux/actionTypes\";\n\nconst ImportAccount = () => {\n  const [loading, setLoading] = useState(false);\n  const [phrase, setPhrase] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  const handleTypeConfirmMnemonics = (e) => {\n    //setMnemonicError(false);\n    setPhrase(e.target.value);\n  };\n  const handleTypeConfirmPassword = (e) => {\n    //setMnemonicError(false);\n    setPassword(e.target.value);\n  };\n\n  const recoverAccount = async () => {\n    try {\n      const split = phrase.split(\" \");\n      if (split.length === 1) {\n        throw new Error(\"유효하지 않은 시드 문구입니다.\");\n      }\n      if (!phrase) return;\n      if (!password) {\n        alert(\"패스워드를 입력해주세요.\");\n        return;\n      }\n      setLoading(true);\n      const { secretKey, seedPhrase } = parseSeedPhrase(phrase);\n\n      const keyPair = KeyPair.fromString(secretKey);\n      const publicKey = keyPair.publicKey.toString();\n\n      const accountIdsByPublickKey = await getAccountIds(publicKey);\n      console.log(accountIdsByPublickKey);\n      \n      const cipherPrivateKey = encryptMessage(secretKey, password);\n      const cipherPhrase = encryptMessage(seedPhrase, password);\n\n      let userInfo = {\n        wallet1: {\n          name: \"wallet1\",\n          accountID:\n            accountIdsByPublickKey,\n            //accountIdsByPublickKey.length > 0 && accountIdsByPublickKey[0],\n          accounts: {\n            [publicKey]: {\n              data: cipherPhrase,\n              address: publicKey,\n              secretKey: cipherPrivateKey,\n            },\n          },\n        },\n      };\n\n      dispatch({\n        type: SWITCH_ACCOUNT,\n        payload: {\n          activeWallet: \"wallet1\",\n          activeAccountID: accountIdsByPublickKey,\n        },\n      });\n\n      dispatch({\n        type: IMPORT_WALLET,\n        payload: {\n          walletImported: true,\n        },\n      });\n      dispatch({\n        type: CREATE_WALLET,\n        payload: {\n          isLoggedIn: true,\n        },\n      });\n      dispatch({\n        type: SET_CURRENT_WALLET_NAME,\n        payload: \"wallet1\",\n      });\n\n      await setStorageSyncValue(\"userInfo\", userInfo);\n      await setStorageSyncValue(\"hashedPassword\", password);\n      await setStorageSyncValue(\"accounts\", 0);\n      localStorage.setItem(\"wallet\", true);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.log(\"err===\", error.message);\n      setLoading(false);\n      alert(error.message);\n    }\n  };\n\n  return (\n    <Box>\n      <EntryHeader />\n      <Typography variant='h6' align='left'>\n        시드 구문으로 계정 복구\n      </Typography>\n      <Typography variant='subtitle2' sx={{ color: '#636363' }} align='left' mt={2}>\n        시드 구문과 비밀번호를 입력해주세요.\n      </Typography>\n      <Box mt={5}>\n        <TextField label='시드 구문 입력' fullWidth variant='outlined' onChange={handleTypeConfirmMnemonics} />\n      </Box>\n      <Box mt={5}>\n        <TextField label='비밀번호 입력' fullWidth variant='outlined' onChange={handleTypeConfirmPassword} />\n      </Box>\n      {/* {mnemonicError && (\n        <Typography variant='subtitle2' align='left' sx={{ color: 'red' }} mt={2} mb={2}>\n          시드 구문이 일치하지 않습니다.\n        </Typography>\n      )} */}\n      <Box mt={5}>\n        <Button onClick={recoverAccount} fullWidth variant='contained' disabled={!password || !phrase}>\n          복구\n        </Button>\n        <Button onClick={() => navigate(\"/dashboard\")} fullWidth variant='contained' >\n          뒤로가기\n        </Button>\n      </Box>\n    </Box>\n\n  );\n};\n\nexport default ImportAccount;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}