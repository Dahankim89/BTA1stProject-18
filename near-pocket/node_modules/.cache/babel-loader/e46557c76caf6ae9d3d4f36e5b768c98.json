{"ast":null,"code":"var _jsxFileName = \"/Users/dahan/Desktop/blockchain/BTA1stProject-18/near-pocket/src/views/Popup/Recover.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { encryptMessage, getAccountIds, getStorageSyncValue, setStorageSyncValue } from \"../../utils/utilsUpdated\";\nimport { parseSeedPhrase } from \"near-seed-phrase\";\nimport { KeyPair } from \"near-api-js\";\nimport { useDispatch } from \"react-redux\";\nimport { CREATE_WALLET, IMPORT_WALLET, SET_CURRENT_WALLET_NAME, SWITCH_ACCOUNT } from \"../../redux/actionTypes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImportAccount = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [phrase, setPhrase] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const recoverAccount = async () => {\n    try {\n      const split = phrase.split(\" \");\n      if (split.length === 1) {\n        throw new Error(\"Invalid Seed Phrase\");\n      }\n      if (!phrase) return;\n      if (!password) {\n        alert(\"Password is required\");\n        return;\n      }\n      setLoading(true);\n      const {\n        secretKey,\n        seedPhrase\n      } = parseSeedPhrase(phrase);\n      const keyPair = KeyPair.fromString(secretKey);\n      const publicKey = keyPair.publicKey.toString();\n      const accountIdsByPublickKey = await getAccountIds(publicKey);\n      const cipherPrivateKey = encryptMessage(secretKey, password);\n      const cipherPhrase = encryptMessage(seedPhrase, password);\n      let userInfo = {\n        wallet1: {\n          name: \"wallet1\",\n          accountID: accountIdsByPublickKey.length > 0 && accountIdsByPublickKey[0],\n          accounts: {\n            [publicKey]: {\n              data: cipherPhrase,\n              address: publicKey,\n              secretKey: cipherPrivateKey\n            }\n          }\n        }\n      };\n      dispatch({\n        type: SWITCH_ACCOUNT,\n        payload: {\n          activeWallet: \"wallet1\",\n          activeAccountID: accountIdsByPublickKey\n        }\n      });\n      dispatch({\n        type: IMPORT_WALLET,\n        payload: {\n          walletImported: true\n        }\n      });\n      dispatch({\n        type: CREATE_WALLET,\n        payload: {\n          isLoggedIn: true\n        }\n      });\n      dispatch({\n        type: SET_CURRENT_WALLET_NAME,\n        payload: \"wallet1\"\n      });\n      await setStorageSyncValue(\"userInfo\", userInfo);\n      await setStorageSyncValue(\"hashedPassword\", password);\n      await setStorageSyncValue(\"accounts\", 0);\n      localStorage.setItem(\"wallet\", true);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.log(\"err===\", error.message);\n      setLoading(false);\n      alert(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Recover Account from Seed Phrase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: phrase,\n      onChange: e => setPhrase(e.target.value),\n      placeholder: \"Enter Seed Phrase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: password,\n      type: \"password\",\n      onChange: e => setPassword(e.target.value),\n      placeholder: \"Enter Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: recoverAccount,\n      children: \"Recover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginTop: 10\n      },\n      onClick: () => navigate(\"/dashboard\"),\n      children: [\" \", \"<\", \" Go Back\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(ImportAccount, \"rz6sf4eqSlHRNlJjVt9yEfSRUys=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n_c = ImportAccount;\nexport default ImportAccount;\nvar _c;\n$RefreshReg$(_c, \"ImportAccount\");","map":{"version":3,"names":["React","useState","useNavigate","encryptMessage","getAccountIds","getStorageSyncValue","setStorageSyncValue","parseSeedPhrase","KeyPair","useDispatch","CREATE_WALLET","IMPORT_WALLET","SET_CURRENT_WALLET_NAME","SWITCH_ACCOUNT","ImportAccount","loading","setLoading","phrase","setPhrase","password","setPassword","dispatch","navigate","recoverAccount","split","length","Error","alert","secretKey","seedPhrase","keyPair","fromString","publicKey","toString","accountIdsByPublickKey","cipherPrivateKey","cipherPhrase","userInfo","wallet1","name","accountID","accounts","data","address","type","payload","activeWallet","activeAccountID","walletImported","isLoggedIn","localStorage","setItem","error","console","log","message","e","target","value","marginTop"],"sources":["/Users/dahan/Desktop/blockchain/BTA1stProject-18/near-pocket/src/views/Popup/Recover.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport {\n  encryptMessage,\n  getAccountIds,\n  getStorageSyncValue,\n  setStorageSyncValue,\n} from \"../../utils/utilsUpdated\";\nimport { parseSeedPhrase } from \"near-seed-phrase\";\nimport { KeyPair } from \"near-api-js\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  CREATE_WALLET,\n  IMPORT_WALLET,\n  SET_CURRENT_WALLET_NAME,\n  SWITCH_ACCOUNT,\n} from \"../../redux/actionTypes\";\n\nconst ImportAccount = () => {\n  const [loading, setLoading] = useState(false);\n  const [phrase, setPhrase] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  const recoverAccount = async () => {\n    try {\n      const split = phrase.split(\" \");\n      if (split.length === 1) {\n        throw new Error(\"Invalid Seed Phrase\");\n      }\n      if (!phrase) return;\n      if (!password) {\n        alert(\"Password is required\");\n        return;\n      }\n      setLoading(true);\n      const { secretKey, seedPhrase } = parseSeedPhrase(phrase);\n\n      const keyPair = KeyPair.fromString(secretKey);\n      const publicKey = keyPair.publicKey.toString();\n\n      const accountIdsByPublickKey = await getAccountIds(publicKey);\n\n      const cipherPrivateKey = encryptMessage(secretKey, password);\n      const cipherPhrase = encryptMessage(seedPhrase, password);\n\n      let userInfo = {\n        wallet1: {\n          name: \"wallet1\",\n          accountID:\n            accountIdsByPublickKey.length > 0 && accountIdsByPublickKey[0],\n          accounts: {\n            [publicKey]: {\n              data: cipherPhrase,\n              address: publicKey,\n              secretKey: cipherPrivateKey,\n            },\n          },\n        },\n      };\n\n      dispatch({\n        type: SWITCH_ACCOUNT,\n        payload: {\n          activeWallet: \"wallet1\",\n          activeAccountID: accountIdsByPublickKey,\n        },\n      });\n\n      dispatch({\n        type: IMPORT_WALLET,\n        payload: {\n          walletImported: true,\n        },\n      });\n      dispatch({\n        type: CREATE_WALLET,\n        payload: {\n          isLoggedIn: true,\n        },\n      });\n      dispatch({\n        type: SET_CURRENT_WALLET_NAME,\n        payload: \"wallet1\",\n      });\n\n      await setStorageSyncValue(\"userInfo\", userInfo);\n      await setStorageSyncValue(\"hashedPassword\", password);\n      await setStorageSyncValue(\"accounts\", 0);\n      localStorage.setItem(\"wallet\", true);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.log(\"err===\", error.message);\n      setLoading(false);\n      alert(error.message);\n    }\n  };\n\n  return (\n    <div>\n      <h3>Recover Account from Seed Phrase</h3>\n      <input\n        value={phrase}\n        onChange={e => setPhrase(e.target.value)}\n        placeholder=\"Enter Seed Phrase\"\n      />\n      <input\n        value={password}\n        type=\"password\"\n        onChange={e => setPassword(e.target.value)}\n        placeholder=\"Enter Password\"\n      />\n      {loading ? (\n        <p>Loading!!!</p>\n      ) : (\n        <button onClick={recoverAccount}>Recover</button>\n      )}\n      <button style={{ marginTop: 10 }} onClick={() => navigate(\"/dashboard\")}>\n        {\" \"}\n        {\"<\"} Go Back\n      </button>\n    </div>\n  );\n};\n\nexport default ImportAccount;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}